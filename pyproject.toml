[build-system]
requires = [
    "setuptools>=61.0",
    "wheel>=0.37.0",
    "cmake>=3.15.0",
    "pybind11>=2.6.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "catzilla"
version = "0.1.0"
description = "Ultra-fast Python web framework with C-accelerated routing"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Rezwan Ahmed Sami", email = "samiahmed0f0@gmail.com"}
]
maintainers = [
    {name = "Rezwan Ahmed Sami", email = "samiahmed0f0@gmail.com"}
]
keywords = [
    "web-framework",
    "fast",
    "performance",
    "c-extension",
    "routing",
    "http",
    "asgi",
    "web-server",
    "high-performance",
    "micro-framework"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Typing :: Typed"
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=2.20.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "build>=0.10.0",
    "twine>=4.0.0"
]
benchmarks = [
    "fastapi>=0.100.0",
    "uvicorn>=0.24.0",
    "flask>=2.3.0",
    "django>=4.2.0",
    "gunicorn>=21.2.0",
    "psutil>=5.9.0",
    "matplotlib>=3.7.0",
    "pandas>=2.0.0",
    "seaborn>=0.12.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",
    "pillow>=10.0.0",
    "kiwisolver>=1.4.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.20.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "requests>=2.31.0"
]

[project.urls]
Homepage = "https://github.com/rezwanahmedsami/catzilla"
Documentation = "https://rezwanahmedsami.github.io/catzilla/"
Repository = "https://github.com/rezwanahmedsami/catzilla"
"Bug Tracker" = "https://github.com/rezwanahmedsami/catzilla/issues"
"Source Code" = "https://github.com/rezwanahmedsami/catzilla"
Changelog = "https://github.com/rezwanahmedsami/catzilla/blob/main/CHANGELOG.md"
"Performance Report" = "https://github.com/rezwanahmedsami/catzilla/blob/main/PERFORMANCE_REPORT_v0.1.0.md"

[project.scripts]
catzilla-server = "catzilla.cli:main"

[tool.setuptools]
packages = ["catzilla"]
package-dir = {"catzilla" = "python/catzilla"}
include-package-data = true
zip-safe = false

[tool.setuptools.package-data]
catzilla = [
    "*.so",
    "*.dll",
    "*.dylib",
    "py.typed"
]

[tool.setuptools.exclude-package-data]
"*" = [
    "tests*",
    "benchmarks*",
    "examples*"
]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Exclude build artifacts
    build/
    | dist/
    | \.eggs/
    | \.git/
    | \.tox/
    | venv/
    | _build/
    | buck-out/
    | __pycache__/
)/
'''

[tool.mypy]
python_version = "0.1.0"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "catzilla._catzilla",
    "catzilla.tests.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests/python"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["python/catzilla"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".venv",
    ".tox"
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

# cibuildwheel configuration for professional wheel building
[tool.cibuildwheel]
# Build for Python 3.8-3.12 across all platforms
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"

# Skip problematic builds
skip = [
    "*-win32",           # Skip 32-bit Windows
    "*-manylinux_i686",  # Skip 32-bit Linux
    "pp*",               # Skip PyPy builds
    "*-musllinux_*",     # Skip musl Linux for now (can enable later)
]

# Build settings - key fix: disable isolated builds in problematic environments
build-frontend = "build"
before-build = [
    "pip install cmake pybind11",
    # Ensure Python development libraries are available for the current Python version
    "python -c \"import sysconfig; print('Using Python at:', sysconfig.get_path('stdlib'))\"",
    # Create development library symlinks if needed for current Python version
    "python -c \"import sysconfig, os, sys; lib_dir = os.path.join(os.path.dirname(sys.executable), '..', 'lib'); os.makedirs(lib_dir, exist_ok=True); version = f'{sys.version_info.major}.{sys.version_info.minor}'; [os.symlink(sys_lib, os.path.join(lib_dir, os.path.basename(sys_lib))) for sys_lib in [f'/usr/lib64/libpython{version}.so', f'/usr/lib64/libpython{version}m.so', f'/lib64/libpython{version}.so'] if os.path.exists(sys_lib) and not os.path.exists(os.path.join(lib_dir, os.path.basename(sys_lib)))]; print('Development library setup complete')\""
]

# Test settings
test-requires = "pytest"
test-command = "python -c \"from catzilla import App, JSONResponse; print('Wheel test passed')\""

# Environment variables for all platforms
environment = { CMAKE_BUILD_TYPE = "Release" }

[tool.cibuildwheel.linux]
# Linux-specific settings for manylinux containers
before-all = [
    # Install system dependencies first
    "yum install -y cmake3 python3-devel python3-libs gcc gcc-c++ make || (apt-get update && apt-get install -y cmake python3-dev libpython3-dev build-essential)",
    "ln -sf /usr/bin/cmake3 /usr/bin/cmake || true",

    # Critical fix: Install Python development headers for each Python version
    # The issue is that manylinux containers have Python versions in /opt/python/ without dev headers
    "echo 'Setting up Python development libraries for all versions...'",

    # Install development packages for common Python versions
    "yum install -y python36-devel python37-devel python38-devel python39-devel python310-devel python311-devel python312-devel || true",

    # Alternative approach: Create development library links for each Python version
    "for py_dir in /opt/python/cp3*; do",
    "  if [ -d \"$py_dir\" ]; then",
    "    py_bin=\"$py_dir/bin/python\"",
    "    if [ -f \"$py_bin\" ]; then",
    "      echo \"Processing Python at $py_bin\"",
    "      # Get version info",
    "      py_ver=$($py_bin -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\" 2>/dev/null || echo 'unknown')",
    "      echo \"  Python version: $py_ver\"",
    "      # Ensure lib directory exists",
    "      mkdir -p \"$py_dir/lib\"",
    "      # Try to link system Python libraries to this Python version",
    "      if [ \"$py_ver\" != 'unknown' ]; then",
    "        for sys_lib in /usr/lib64/libpython${py_ver}* /lib64/libpython${py_ver}* /usr/lib/libpython${py_ver}*; do",
    "          if [ -f \"$sys_lib\" ]; then",
    "            ln -sf \"$sys_lib\" \"$py_dir/lib/\" 2>/dev/null || true",
    "            echo \"    Linked: $sys_lib\"",
    "          fi",
    "        done",
    "      fi",
    "    fi",
    "  fi",
    "done",

    # Verify installations
    "echo 'System verification:'",
    "python --version",
    "cmake --version || echo 'CMake not found in PATH'",
    "echo 'Python installations:'",
    "ls -la /opt/python/ | head -10",
    "echo 'System Python info:'",
    "python -c 'import sysconfig; print(\"Include:\", sysconfig.get_path(\"include\"))' || true",
    "python -c 'import sysconfig; print(\"Stdlib:\", sysconfig.get_path(\"stdlib\"))' || true"
]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"

[tool.cibuildwheel.linux.environment]
# Enhanced CMake configuration for manylinux containers
CMAKE_ARGS = "-DCMAKE_BUILD_TYPE=Release -DPython3_EXECUTABLE={python} -DPython3_FIND_STRATEGY=LOCATION -DPython3_ROOT_DIR={python_dir} -DPython3_FIND_REGISTRY=NEVER"
# Help CMake find Python in manylinux containers
PYTHON = "{python}"
# Ensure Python development headers are found
CMAKE_PREFIX_PATH = "{python_dir}"
# Additional environment variables to help with Python detection
PYTHONHOME = "{python_dir}"
# Force CMake to look in the correct Python directory first
CMAKE_FIND_ROOT_PATH = "{python_dir}"

[tool.cibuildwheel.macos]
# macOS-specific settings
before-all = "brew install cmake"

[tool.cibuildwheel.macos.environment]
CMAKE_ARGS = "-DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15"
MACOSX_DEPLOYMENT_TARGET = "10.15"

[tool.cibuildwheel.windows]
# Windows-specific settings
before-all = "choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'"

[tool.cibuildwheel.windows.environment]
CMAKE_ARGS = "-DCMAKE_BUILD_TYPE=Release"
