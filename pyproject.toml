[build-system]
requires = [
    "setuptools>=61.0",
    "wheel>=0.37.0",
    "cmake>=3.15.0",
    "pybind11>=2.6.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "catzilla"
version = "0.1.0"
description = "Ultra-fast Python web framework with C-accelerated routing"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Rezwan Ahmed Sami", email = "samiahmed0f0@gmail.com"}
]
maintainers = [
    {name = "Rezwan Ahmed Sami", email = "samiahmed0f0@gmail.com"}
]
keywords = [
    "web-framework",
    "fast",
    "performance",
    "c-extension",
    "routing",
    "http",
    "asgi",
    "web-server",
    "high-performance",
    "micro-framework"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Typing :: Typed"
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=2.20.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "build>=0.10.0",
    "twine>=4.0.0"
]
benchmarks = [
    "fastapi>=0.100.0",
    "uvicorn>=0.24.0",
    "flask>=2.3.0",
    "django>=4.2.0",
    "gunicorn>=21.2.0",
    "psutil>=5.9.0",
    "matplotlib>=3.7.0",
    "pandas>=2.0.0",
    "seaborn>=0.12.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",
    "pillow>=10.0.0",
    "kiwisolver>=1.4.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.20.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "requests>=2.31.0"
]

[project.urls]
Homepage = "https://github.com/rezwanahmedsami/catzilla"
Documentation = "https://rezwanahmedsami.github.io/catzilla/"
Repository = "https://github.com/rezwanahmedsami/catzilla"
"Bug Tracker" = "https://github.com/rezwanahmedsami/catzilla/issues"
"Source Code" = "https://github.com/rezwanahmedsami/catzilla"
Changelog = "https://github.com/rezwanahmedsami/catzilla/blob/main/CHANGELOG.md"
"Performance Report" = "https://github.com/rezwanahmedsami/catzilla/blob/main/PERFORMANCE_REPORT_v0.1.0.md"

[project.scripts]
catzilla-server = "catzilla.cli:main"

[tool.setuptools]
packages = ["catzilla"]
package-dir = {"catzilla" = "python/catzilla"}
include-package-data = true
zip-safe = false

[tool.setuptools.package-data]
catzilla = [
    "*.so",
    "*.dll",
    "*.dylib",
    "py.typed"
]

[tool.setuptools.exclude-package-data]
"*" = [
    "tests*",
    "benchmarks*",
    "examples*"
]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Exclude build artifacts
    build/
    | dist/
    | \.eggs/
    | \.git/
    | \.tox/
    | venv/
    | _build/
    | buck-out/
    | __pycache__/
)/
'''

[tool.mypy]
python_version = "0.1.0"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "catzilla._catzilla",
    "catzilla.tests.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests/python"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["python/catzilla"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".venv",
    ".tox"
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

# cibuildwheel configuration for professional wheel building
[tool.cibuildwheel]
# Build for Python 3.8-3.12 across all platforms
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"

# Skip problematic builds
skip = [
    "*-win32",           # Skip 32-bit Windows
    "*-manylinux_i686",  # Skip 32-bit Linux
    "pp*",               # Skip PyPy builds
    "*-musllinux_*",     # Skip musl Linux for now (can enable later)
]

# Build settings - comprehensive Python development environment setup
build-frontend = "build"
before-build = [
    "pip install cmake pybind11",
    # Comprehensive Python development setup for current build environment
    "python -c \"import sys, os, sysconfig, shutil; print(f'Setting up Python {sys.version_info.major}.{sys.version_info.minor} development environment'); py_dir = os.path.dirname(sys.executable); print(f'Python directory: {py_dir}')\"",

    # Install development packages specifically for the current Python version
    "python -c \"import sys, subprocess, os; version=f'{sys.version_info.major}{sys.version_info.minor}'; subprocess.run(['yum', 'install', '-y', f'python{version}-devel', f'python{sys.version_info.major}-devel'], capture_output=True); subprocess.run(['yum', 'install', '-y', 'python3-devel', 'python-devel'], capture_output=True)\"",

    # Create comprehensive development library structure
    "python -c \"",
    "import sys, os, shutil, glob",
    "py_dir = os.path.dirname(sys.executable)",
    "lib_dir = os.path.join(py_dir, '..', 'lib')",
    "include_dir = os.path.join(py_dir, '..', 'include')",
    "os.makedirs(lib_dir, exist_ok=True)",
    "os.makedirs(include_dir, exist_ok=True)",
    "version = f'{sys.version_info.major}.{sys.version_info.minor}'",
    "version_nodot = f'{sys.version_info.major}{sys.version_info.minor}'",
    "# Look for system Python libraries in multiple locations",
    "lib_patterns = [",
    "    f'/usr/lib64/libpython{version}*.so*',",
    "    f'/usr/lib/x86_64-linux-gnu/libpython{version}*.so*',",
    "    f'/lib64/libpython{version}*.so*',",
    "    f'/usr/lib/libpython{version}*.so*',",
    "    '/usr/lib64/libpython3*.so*',",
    "    '/usr/lib/x86_64-linux-gnu/libpython3*.so*'",
    "]",
    "# Look for system Python headers",
    "include_patterns = [",
    "    f'/usr/include/python{version}*',",
    "    f'/usr/include/python{sys.version_info.major}*',",
    "    '/usr/include/python3*'",
    "]",
    "# Copy/link libraries",
    "for pattern in lib_patterns:",
    "    for lib_file in glob.glob(pattern):",
    "        if os.path.isfile(lib_file):",
    "            dest = os.path.join(lib_dir, os.path.basename(lib_file))",
    "            if not os.path.exists(dest):",
    "                try:",
    "                    shutil.copy2(lib_file, dest)",
    "                    print(f'Copied library: {lib_file} -> {dest}')",
    "                except: pass",
    "# Copy/link headers",
    "for pattern in include_patterns:",
    "    for inc_dir in glob.glob(pattern):",
    "        if os.path.isdir(inc_dir):",
    "            dest = os.path.join(include_dir, f'python{version}')",
    "            if not os.path.exists(dest):",
    "                try:",
    "                    shutil.copytree(inc_dir, dest)",
    "                    print(f'Copied headers: {inc_dir} -> {dest}')",
    "                    break",
    "                except: pass",
    "print(f'Development environment setup complete for Python {version}')",
    "\""
]

# Test settings
test-requires = "pytest"
test-command = "python -c \"from catzilla import App, JSONResponse; print('Wheel test passed')\""

# Environment variables for all platforms
environment = { CMAKE_BUILD_TYPE = "Release" }

[tool.cibuildwheel.linux]
# Linux-specific settings for manylinux containers - comprehensive Python development setup
before-all = [
    # Install comprehensive system dependencies
    "echo 'Installing comprehensive Python development environment...'",

    # Install basic build tools and Python development packages
    "yum update -y || true",
    "yum groupinstall -y 'Development Tools' || yum install -y gcc gcc-c++ make || true",
    "yum install -y cmake3 python3-devel python3-libs python-devel || (apt-get update && apt-get install -y cmake python3-dev libpython3-dev build-essential)",
    "ln -sf /usr/bin/cmake3 /usr/bin/cmake || ln -sf /usr/bin/cmake /usr/bin/cmake3 || true",

    # Install Python development packages for all versions available in the container
    "yum install -y python27-devel python36-devel python37-devel python38-devel python39-devel python310-devel python311-devel python312-devel || true",
    "yum install -y python3-devel python38-devel python39-devel python310-devel python311-devel python312-devel || true",

    # Install additional library packages that might be needed
    "yum install -y zlib-devel openssl-devel sqlite-devel bzip2-devel libffi-devel || true",

    # Create comprehensive development environment for all Python versions in /opt/python/
    "echo 'Setting up development environments for all Python installations...'",
    "for py_dir in /opt/python/cp3*; do",
    "  if [ -d \"$py_dir\" ]; then",
    "    py_bin=\"$py_dir/bin/python\"",
    "    if [ -f \"$py_bin\" ]; then",
    "      echo \"==== Processing Python at $py_bin ====\"",
    "      # Get version info",
    "      py_ver=$($py_bin -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\" 2>/dev/null || echo 'unknown')",
    "      py_ver_nodot=$($py_bin -c \"import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')\" 2>/dev/null || echo 'unknown')",
    "      echo \"  Python version: $py_ver (nodot: $py_ver_nodot)\"",
    "      ",
    "      # Create necessary directories",
    "      mkdir -p \"$py_dir/lib\" \"$py_dir/include\"",
    "      ",
    "      # Copy system Python libraries to this Python installation",
    "      echo \"  Copying libraries...\"",
    "      for lib_pattern in \"/usr/lib64/libpython${py_ver}*\" \"/usr/lib64/libpython${py_ver_nodot}*\" \"/usr/lib/x86_64-linux-gnu/libpython${py_ver}*\" \"/lib64/libpython${py_ver}*\" \"/usr/lib64/libpython3*\" \"/usr/lib/x86_64-linux-gnu/libpython3*\"; do",
    "        for lib_file in $lib_pattern; do",
    "          if [ -f \"$lib_file\" ]; then",
    "            cp \"$lib_file\" \"$py_dir/lib/\" 2>/dev/null || true",
    "            echo \"    Copied: $lib_file\"",
    "          fi",
    "        done",
    "      done",
    "      ",
    "      # Copy system Python headers to this Python installation",
    "      echo \"  Copying headers...\"",
    "      for inc_pattern in \"/usr/include/python${py_ver}*\" \"/usr/include/python${py_ver_nodot}*\" \"/usr/include/python3*\"; do",
    "        for inc_dir in $inc_pattern; do",
    "          if [ -d \"$inc_dir\" ]; then",
    "            cp -r \"$inc_dir\"/* \"$py_dir/include/\" 2>/dev/null || true",
    "            echo \"    Copied headers from: $inc_dir\"",
    "            break",
    "          fi",
    "        done",
    "      done",
    "      ",
    "      echo \"  Setup complete for Python $py_ver\"",
    "    fi",
    "  fi",
    "done",

    # Verify installations and provide diagnostic information
    "echo '==== System verification ===='",
    "python --version || echo 'System python not found'",
    "cmake --version || echo 'CMake not found in PATH'",
    "ls -la /usr/lib64/libpython* | head -5 || echo 'No system Python libraries found in /usr/lib64'",
    "ls -la /usr/include/python* | head -5 || echo 'No system Python headers found in /usr/include'",
    "echo 'Python installations in /opt/python/:'",
    "ls -la /opt/python/ | head -10",
    "echo 'Development environment setup complete!'"
]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"

[tool.cibuildwheel.linux.environment]
# Enhanced CMake configuration for manylinux containers with comprehensive Python detection
CMAKE_ARGS = "-DCMAKE_BUILD_TYPE=Release -DPython3_EXECUTABLE={python} -DPython3_FIND_STRATEGY=LOCATION -DPython3_ROOT_DIR={python_dir} -DPython3_FIND_REGISTRY=NEVER -DPython3_FIND_FRAMEWORK=NEVER -DCMAKE_FIND_DEBUG_MODE=ON"
# Comprehensive Python environment setup
PYTHON = "{python}"
PYTHONHOME = "{python_dir}"
CMAKE_PREFIX_PATH = "{python_dir}:/usr"
CMAKE_FIND_ROOT_PATH = "{python_dir}:/usr"
# Additional library and include paths
CMAKE_LIBRARY_PATH = "{python_dir}/lib:/usr/lib64:/usr/lib/x86_64-linux-gnu:/lib64"
CMAKE_INCLUDE_PATH = "{python_dir}/include:/usr/include"
# Force CMake to look for Python components in our prepared directories
Python3_LIBRARY_DIRS = "{python_dir}/lib:/usr/lib64:/usr/lib/x86_64-linux-gnu"
Python3_INCLUDE_DIRS = "{python_dir}/include:/usr/include"

[tool.cibuildwheel.macos]
# macOS-specific settings
before-all = "brew install cmake"

[tool.cibuildwheel.macos.environment]
CMAKE_ARGS = "-DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15"
MACOSX_DEPLOYMENT_TARGET = "10.15"

[tool.cibuildwheel.windows]
# Windows-specific settings
before-all = "choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'"

[tool.cibuildwheel.windows.environment]
CMAKE_ARGS = "-DCMAKE_BUILD_TYPE=Release"
