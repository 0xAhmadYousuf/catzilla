name: Catzilla CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Add permissions block at workflow level
permissions:
  contents: write
  pull-requests: write

jobs:
  format:
    name: Format code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref || github.ref_name }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Format with black
      run: |
        black python/catzilla

    - name: Format with isort
      run: |
        isort python/catzilla

    - name: Check for changes
      id: git-check
      run: |
        git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

    - name: Commit changes
      if: steps.git-check.outputs.changes == 'true' && github.event_name != 'pull_request'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add python/catzilla
        git commit -m "style: format code with black and isort"

    - name: Push changes
      if: steps.git-check.outputs.changes == 'true' && github.event_name != 'pull_request'
      run: git push

    - name: Create PR comment
      if: steps.git-check.outputs.changes == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '⚠️ Code formatting issues were found. Please run `black` and `isort` locally on your Python files.'
          })

  lint:
    name: Lint code
    needs: format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 python/catzilla --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    name: Test on Python ${{ matrix.python-version }} and ${{ matrix.os }}
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pydantic build wheel setuptools

    - name: Build C extension
      run: |
        cmake -S . -B build
        cmake --build build

    - name: Install package
      run: |
        pip install -e .

    - name: Run tests
      run: |
        chmod +x scripts/run_tests.sh
        PYTHONPATH=python ./scripts/run_tests.sh --all --verbose

  build:
    name: Build package on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build package
      run: |
        # Build both wheel and sdist
        python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: |
          dist/*.whl
          dist/*.tar.gz
        retention-days: 5 