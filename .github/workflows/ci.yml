name: Catzilla CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pydantic

    - name: Build C extension
      run: |
        cmake -S . -B build
        cmake --build build

    - name: Install package
      run: |
        pip install -e .

    - name: Run tests
      run: |
        chmod +x scripts/run_tests.sh
        PYTHONPATH=python ./scripts/run_tests.sh --all --verbose

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build wheels
      run: |
        python -m build --wheel

    - name: Store wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build sdist
      run: |
        python -m build --sdist

    - name: Store sdist
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/*.tar.gz

  lint:
    name: Lint code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run linters
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 python/catzilla --count --select=E9,F63,F7,F82 --show-source --statistics
        # Run black
        black --check python/catzilla
        # Run isort
        isort --check-only --diff python/catzilla 