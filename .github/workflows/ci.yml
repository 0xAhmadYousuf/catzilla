name: CI

on:
  push:

    paths:
      # Run CI when source code changes
      - 'src/**'
      - 'python/**'
      - 'tests/**'
      - 'examples/**'
      # Run CI when build configuration changes
      - 'CMakeLists.txt'
      - 'setup.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'Makefile'
      - 'MANIFEST.in'
      # Run CI when scripts change
      - 'scripts/**'
      # Run CI when CI configuration changes
      - '.github/workflows/**'
      # Run CI when dependencies change
      - 'deps/**'

  pull_request:
    branches: [ main, develop ]
    paths:
      # Same paths as push for consistency
      - 'src/**'
      - 'python/**'
      - 'tests/**'
      - 'examples/**'
      - 'CMakeLists.txt'
      - 'setup.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'Makefile'
      - 'MANIFEST.in'
      - 'scripts/**'
      - '.github/workflows/**'
      - 'deps/**'

  # Allow manual triggering for testing
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Fast smoke tests - run first to fail fast
  smoke-test:
    name: Smoke Test (Python 3.10, Ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: pip
        cache-dependency-path: |
          requirements*.txt
          pyproject.toml

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libjemalloc-dev libjemalloc2

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Build Catzilla
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Lint check
      run: |
        python -m flake8 python/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 check completed"

    - name: Quick functionality test
      run: |
        python -c "
        from catzilla import Catzilla, JSONResponse
        app = Catzilla(auto_validation=True, memory_profiling=False)
        @app.get('/')
        def test(request): return JSONResponse({'status': 'ok'})
        print('Smoke test passed')
        "

  # Core test matrix - reduced for efficiency
  test:
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: smoke-test
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        # Strategic selection - not every combination
        include:
          # Latest stable on all platforms
          - python-version: '3.11'
            os: ubuntu-latest
          - python-version: '3.11'
            os: windows-latest
          - python-version: '3.11'
            os: macos-latest
          # Edge versions on Linux only
          - python-version: '3.8'
            os: ubuntu-latest
          - python-version: '3.12'
            os: ubuntu-latest
          - python-version: '3.13'
            os: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip

    - name: Setup system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libjemalloc-dev libjemalloc2

    - name: Setup system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake jemalloc

    - name: Setup system dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements-dev.txt

    - name: Build Catzilla (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Build Catzilla (Windows)
      if: runner.os == 'Windows'
      run: scripts\build.bat

    - name: Run Python tests
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/run_tests.sh
        ./scripts/run_tests.sh --python

    - name: Run Python tests (Windows)
      if: runner.os == 'Windows'
      run: scripts\run_tests.bat --python

    - name: Run C tests (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/run_tests.sh
        ./scripts/run_tests.sh --c

    - name: Run C tests (Windows)
      if: runner.os == 'Windows'
      run: scripts\run_tests.bat --c

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-results-*.xml
          tests/**/*.xml

  # Security and quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: smoke-test

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: pip

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libjemalloc-dev libjemalloc2

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Build Catzilla
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Security scan with bandit
      run: bandit -r python/ -f json -o bandit-report.json || true

    - name: Vulnerability scan
      run: pip-audit --desc --format=json --output=audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          audit-report.json
