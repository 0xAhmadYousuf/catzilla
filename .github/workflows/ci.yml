name: Catzilla CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Add permissions block at workflow level
permissions:
  contents: read

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest build wheel setuptools

    - name: Build C extension
      run: |
        cmake -S . -B build
        cmake --build build --config Release --verbose

    - name: Debug build output (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "=== Build directory contents ==="
        Get-ChildItem build
        echo "=== CMake cache ==="
        Get-Content build\CMakeCache.txt | Select-String -Pattern "python|compiler|error" -CaseSensitive:$false
        echo "=== Any error logs ==="
        if (Test-Path "build\*.log") { Get-Content build\*.log }

    - name: Install package
      run: |
        pip install -e .

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/run_tests.sh
        PYTHONPATH=python ./scripts/run_tests.sh --all --verbose

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        set PYTHONPATH=python
        scripts\run_tests.bat --all --verbose

    - name: Test import and basic functionality
      run: |
        python -c "
        from catzilla import App, JSONResponse
        print('✅ Catzilla imported successfully')

        # Test basic app creation
        app = App()

        @app.get('/')
        def hello(request):
            return JSONResponse({'message': 'Hello, World!'})

        print('✅ Basic functionality test passed')
        "

  build:
    name: Build package on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build package
      run: |
        # Build both wheel and sdist
        python -m build

    - name: Test built package
      run: |
        # Install the built wheel
        pip install dist/*.whl
        # Test that it can be imported and used
        python -c "
        from catzilla import App, JSONResponse
        print('✅ Built package works correctly')
        app = App()
        @app.get('/')
        def test(req):
            return JSONResponse({'status': 'ok'})
        print('✅ Package functionality verified')
        "

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: |
          dist/*.whl
          dist/*.tar.gz
        retention-days: 5
